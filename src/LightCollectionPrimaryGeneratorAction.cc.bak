//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
/// \file LightCollection/src/LightCollectionPrimaryGeneratorAction.cc
/// \brief Implementation of the LightCollectionPrimaryGeneratorAction class
//
//
//
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#include "LightCollectionPrimaryGeneratorAction.hh"
#include "LightCollectionPrimaryGeneratorMessenger.hh"
#include "G4Event.hh"
#include "G4ParticleDefinition.hh"
#include "G4ParticleGun.hh"
#include "G4ParticleTable.hh"
#include "G4SystemOfUnits.hh"
#include "Randomize.hh"

#include "G4Box.hh"
#include "G4VPhysicalVolume.hh"
#include "G4LogicalVolume.hh"
#include "G4RunManager.hh"

#include "utilities.hh"
#include "MyPhysicalVolume.hh"
bool LightCollectionPrimaryGeneratorAction::isInitialized = false;
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
LightCollectionPrimaryGeneratorAction::LightCollectionPrimaryGeneratorAction(LightCollectionDetectorConstruction* detectorConstruction)
  : fDetectorConstruction(detectorConstruction)
  , G4VUserPrimaryGeneratorAction()
  , fParticleGun(nullptr)
{
  G4int n_particle = 1;
  fParticleGun     = new G4ParticleGun(n_particle);
  // create a messenger for this class
  fGunMessenger = new LightCollectionPrimaryGeneratorMessenger(this);
  // default kinematic
  //

  G4ParticleDefinition* particle = G4ParticleTable::GetParticleTable()->FindParticle("gamma");
  fParticleGun->SetParticleDefinition(particle);

  // 设置粒子发射位置
  source_position = G4ThreeVector(0., 0., 16.*mm);
  fParticleGun->SetParticlePosition(source_position);

  // G4ThreeVector direction(0.4, 0.1, 0.8);
  // fParticleGun->SetParticleMomentumDirection(direction);

  // 随机设置粒子能量
  G4double energy = 1*keV;
  fParticleGun->SetParticleEnergy(energy);

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
LightCollectionPrimaryGeneratorAction::~LightCollectionPrimaryGeneratorAction()
{
  delete fParticleGun;
  delete fGunMessenger;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
void LightCollectionPrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent)
{

  G4RunManager* runManager = G4RunManager::GetRunManager();
  const LightCollectionDetectorConstruction* detector = dynamic_cast<const LightCollectionDetectorConstruction*>(runManager->GetUserDetectorConstruction());
  if (!detector) {
    G4ExceptionDescription msg;
    msg << "Detector construction is not found!";
    G4Exception("LightCollectionPrimaryGeneratorAction::GeneratePrimaries()", "LightCollection_001", FatalException, msg);
  }

  // 获取闪烁体的位置和形状
  MyPhysicalVolume* myphysicalScintillator = detector->GetMyVolume("sc_crystal");
  G4VPhysicalVolume*physicalScintillator = myphysicalScintillator;
  // 这里有bug，本来该获取绝对坐标，但是现在获取的是闪烁体相对于其母体的坐标。
  G4ThreeVector position = myphysicalScintillator->GetAbsolutePosition();
  G4Box* box = dynamic_cast<G4Box*>(physicalScintillator->GetLogicalVolume()->GetSolid());

  // 计算能照射到闪烁体的所有方向，假设闪烁体是长方体，相对XYZ轴没有旋转
  /*          ↑Z
              *
              |
              |     h = source_z - z
           _____r_
          |       | z
    ———————————————————————→Y 
          ↙ X
  */
  G4double halfX = box->GetXHalfLength();
  G4double halfY = box->GetYHalfLength();
  G4double halfZ = box->GetZHalfLength();
  G4double r = std::sqrt(halfX * halfX + halfY * halfY);
  My_msg= f("\n---------------------\nhalfX: {}, halfY: {}, halfZ: {}, r: {}\n-----------------", halfX, halfY, halfZ, r);
  myPrint(lv, My_msg);

  G4double source_Z = source_position.z();
  G4double h = source_Z - position.z() - halfZ; 
  G4double cosThetaMax = - h / std::sqrt(h * h + r * r);
  My_msg= f("\n---------------------\nsourceZ: {}, positionZ: {}, h: {}, cosThetaMax: {}\n-----------------",source_Z, position.z(), h, cosThetaMax);
  myPrint(lv, My_msg);

  // 在这些方向上随机抽样，生成粒子
  G4double cosTheta = cosThetaMax - (cosThetaMax + 1) * G4UniformRand(); // 在[-1, cosThetaMax]范围内均匀分布
  G4double theta =  std::acos(cosTheta);
  G4double phi = G4UniformRand() * 2*CLHEP::pi;
  G4ThreeVector direction(std::sin(theta) * std::cos(phi), std::sin(theta) * std::sin(phi), std::cos(theta));
  fParticleGun->SetParticleMomentumDirection(direction);

  // 生成粒子
  fParticleGun->GeneratePrimaryVertex(anEvent);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
void LightCollectionPrimaryGeneratorAction::SetOptPhotonPolar()
{
  G4double angle = G4UniformRand() * 360.0 * deg;
  SetOptPhotonPolar(angle);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
void LightCollectionPrimaryGeneratorAction::SetOptPhotonPolar(G4double angle)
{
  if(fParticleGun->GetParticleDefinition()->GetParticleName() !=
     "opticalphoton")
  {
    G4ExceptionDescription ed;
    ed << "Warning: the particleGun is not an opticalphoton";
    G4Exception("LightCollectionPrimaryGeneratorAction::SetOptPhotonPolar()",
                "LightCollection_010", JustWarning, ed);
    return;
  }

  G4ThreeVector normal(1., 0., 0.);
  G4ThreeVector kphoton = fParticleGun->GetParticleMomentumDirection();
  G4ThreeVector product = normal.cross(kphoton);
  G4double modul2       = product * product;

  G4ThreeVector e_perpend(0., 0., 1.);
  if(modul2 > 0.)
    e_perpend = (1. / std::sqrt(modul2)) * product;
  G4ThreeVector e_paralle = e_perpend.cross(kphoton);

  G4ThreeVector polar =
    std::cos(angle) * e_paralle + std::sin(angle) * e_perpend;
  fParticleGun->SetParticlePolarization(polar);
}
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

